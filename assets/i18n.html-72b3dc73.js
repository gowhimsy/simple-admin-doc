import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o,c,a as n,b as i,d as p,e as a}from"./app-1fd84463.js";const l={},r=a(`<h1 id="i18n-国际化" tabindex="-1"><a class="header-anchor" href="#i18n-国际化" aria-hidden="true">#</a> i18n 国际化</h1><blockquote><p>项目支持国际化多语言，主要分为前端国际化和后端国际化</p></blockquote><h2 id="前端国际化" tabindex="-1"><a class="header-anchor" href="#前端国际化" aria-hidden="true">#</a> 前端国际化</h2><blockquote><p>前端国际化文件位于 <code>src/locales/*</code> 中,前端静态文本翻译由前端进行国际化</p></blockquote><p>在 vue 或 ts 文件中调用</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> t <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useI18n</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 使用方法</span>
<span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token function">t</span><span class="token punctuation">(</span><span class="token string">&quot;sys.dictionary.dictionaryList&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),u={href:"https://doc.vvbin.cn/dep/i18n.html",target:"_blank",rel:"noopener noreferrer"},d=a(`<h2 id="后端国际化" tabindex="-1"><a class="header-anchor" href="#后端国际化" aria-hidden="true">#</a> 后端国际化</h2><blockquote><p>国际化文件位于 i18n 文件夹，后端国际化用于翻译所有来自后端的动态数据，core 中的目录结构为</p></blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>├── locale
│   ├── en.json
│   └── zh.json
├── translator.go
├── translator_test.go
└── var.go

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只需在 en.json 和 zh.json 中添加翻译即可</p><h3 id="初始化方法" tabindex="-1"><a class="header-anchor" href="#初始化方法" aria-hidden="true">#</a> 初始化方法</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>trans <span class="token operator">:=</span> i18n<span class="token punctuation">.</span><span class="token function">NewTranslator</span><span class="token punctuation">(</span>i18n2<span class="token punctuation">.</span>LocaleFS<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="使用方法" tabindex="-1"><a class="header-anchor" href="#使用方法" aria-hidden="true">#</a> 使用方法</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>l<span class="token punctuation">.</span>svcCtx<span class="token punctuation">.</span>Trans<span class="token punctuation">.</span><span class="token function">Trans</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>ctx<span class="token punctuation">,</span> i18n<span class="token punctuation">.</span>Success<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="读取外部文件" tabindex="-1"><a class="header-anchor" href="#读取外部文件" aria-hidden="true">#</a> 读取外部文件</h3><p>在 v1.0.7 版本之后支持读取外部 i18n 文件</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>    <span class="token keyword">var</span> trans <span class="token operator">*</span>i18n<span class="token punctuation">.</span>Translator
	<span class="token keyword">if</span> c<span class="token punctuation">.</span>I18nConf<span class="token punctuation">.</span>Dir <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
		trans <span class="token operator">=</span> i18n<span class="token punctuation">.</span><span class="token function">NewTranslatorFromFile</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>I18nConf<span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		trans <span class="token operator">=</span> i18n<span class="token punctuation">.</span><span class="token function">NewTranslator</span><span class="token punctuation">(</span>i18n2<span class="token punctuation">.</span>LocaleFS<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>i18n.NewTranslatorFromFile(c.I18nConf)</code> 即可读取外部文件</p>`,12);function k(v,h){const s=t("ExternalLinkIcon");return o(),c("div",null,[r,n("p",null,[n("a",u,[i("详细教程"),p(s)])]),d])}const g=e(l,[["render",k],["__file","i18n.html.vue"]]);export{g as default};
