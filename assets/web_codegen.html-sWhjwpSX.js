import{_ as s}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as i,o,c as d,a as e,b as a,d as n,e as r}from"./app-9xAVjQoh.js";const l={},c=e("h1",{id:"vben-web-code-generation",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#vben-web-code-generation","aria-hidden":"true"},"#"),a(" Vben web code generation")],-1),p=e("blockquote",null,[e("p",null,"Make sure that you have been installed follow software:")],-1),u=e("ul",null,[e("li",null,"simple-admin-tool (goctls) v1.5.2 +")],-1),m={class:"hint-container info"},h=e("p",{class:"hint-container-title"},"Info",-1),v={href:"https://youtu.be/j7wEcaWVEKw",target:"_blank",rel:"noopener noreferrer"},b=r(`<h2 id="create-example-codes" tabindex="-1"><a class="header-anchor" href="#create-example-codes" aria-hidden="true">#</a> Create example codes</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>goctls frontend vben <span class="token parameter variable">--api_file</span><span class="token operator">=</span>/home/ryan/GolandProjects/simple-admin-example-api/desc/student.api <span class="token parameter variable">--output</span><span class="token operator">=</span>./ <span class="token parameter variable">--folder_name</span><span class="token operator">=</span>example <span class="token parameter variable">--prefix</span><span class="token operator">=</span>example-api <span class="token parameter variable">--sub_folder</span><span class="token operator">=</span>student
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="frontend-vbenparameters" tabindex="-1"><a class="header-anchor" href="#frontend-vbenparameters" aria-hidden="true">#</a> <code>frontend vben</code>parameters</h3><table><thead><tr><th>Parameters</th><th>Must</th><th>Default</th><th>Introduction</th><th>Usage</th></tr></thead><tbody><tr><td>api_file</td><td>Yes</td><td></td><td>Api file path</td><td>Input the api file absolute path，like above student.api</td></tr><tr><td>output</td><td>Yes</td><td></td><td>Output path</td><td>Input simple admin backend ui root directory</td></tr><tr><td>folder_name</td><td>Yes</td><td></td><td>Folder name</td><td>Core service is sys, in example project is example</td></tr><tr><td>prefix</td><td>Yes</td><td></td><td>Request prefix</td><td>Used for request redirect，such as sys-api in core, example project is example-api, you need to edit env.development, add proxy</td></tr><tr><td>sub_folder</td><td>No</td><td></td><td>Sub directory</td><td>Used for generating sub-dir in views，such as user,token in sys directory</td></tr><tr><td>overwrite</td><td>No</td><td>false</td><td>Whether it covers the generated file</td><td><code>true</code> will cover all generated files</td></tr></tbody></table><blockquote><p>** Run <code>goctls frontend vben --help</code> see more details **</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ goctls frontend vben <span class="token parameter variable">--help</span>
Generate frontend related files

Usage:
  goctl frontend vben <span class="token punctuation">[</span>flags<span class="token punctuation">]</span>

Flags:
  -a, <span class="token parameter variable">--api_file</span> string      The absolute path of api <span class="token function">file</span>
  -f, <span class="token parameter variable">--folder_name</span> string   The folder name to generate <span class="token function">file</span> <span class="token keyword">in</span> different directory. e.g. <span class="token function">file</span> folder <span class="token keyword">in</span> simple admin backend ui <span class="token function">which</span> is to store <span class="token function">file</span> manager <span class="token function">service</span> files <span class="token punctuation">(</span>default <span class="token string">&quot;sys&quot;</span><span class="token punctuation">)</span>
  -h, <span class="token parameter variable">--help</span>                 <span class="token builtin class-name">help</span> <span class="token keyword">for</span> vben
  -m, <span class="token parameter variable">--model_name</span> string    The model name. e.g. Example
  -o, <span class="token parameter variable">--output</span> string        The output directory, it should be the root directory of simple admin backend ui <span class="token punctuation">(</span>default <span class="token string">&quot;./&quot;</span><span class="token punctuation">)</span>
  -w, <span class="token parameter variable">--overwrite</span>            Whether to overwrite the files, it will overwrite all generated files
  -p, <span class="token parameter variable">--prefix</span> string        The request prefix <span class="token keyword">for</span> proxy. e.g. sys-api <span class="token punctuation">(</span>default <span class="token string">&quot;sys-api&quot;</span><span class="token punctuation">)</span>
  -s, <span class="token parameter variable">--sub_folder</span> string    The sub folder name. e.g. src/views/sys sub folder user <span class="token function">which</span> path is src/views/sys/user
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>You can get code</p></blockquote><ul><li><code>src/api/example/student.ts src/api/example/model/student.ts</code> API defined codes</li><li><code>src/locales/lang/en/example.ts src/locales/lang/en/example.ts</code> i18n codes</li><li><code>src/views/example/*</code> views codes</li></ul><h3 id="you-need-to-do-after-generation" tabindex="-1"><a class="header-anchor" href="#you-need-to-do-after-generation" aria-hidden="true">#</a> You need to do after generation</h3><ul><li>Modify env.development and deploy/default.conf to add new proxy</li><li>Modify locales files to optimize zh-CN translation</li><li>Modify <code>*.data.ts</code> file in view. Optimize the chinese translation in <code>locales/lang/example.ts</code></li><li>Add api to database and database initialization code</li><li>Add menu to database and initialization code</li></ul><h3 id="common-mistakes" tabindex="-1"><a class="header-anchor" href="#common-mistakes" aria-hidden="true">#</a> Common mistakes</h3><ul><li>The error &quot;failed to get the fields of the model, please check the api file and your model name&quot; appears. This is because the api file does not provide the data type configuration required to generate the model.</li></ul><p>For example, you want to generate model data for a User</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// What is provided in your api file may be like this
type User {
  Name string \`json:&quot;name&quot;\`
  Age int \`json:&quot;age&quot;\`
  Email string \`json:&quot;email&quot;\`
}

// But what is needed to generate the front-end data model is this
type UserInfo {
  Name string \`json:&quot;name&quot;\`
  Age int \`json:&quot;age&quot;\`
  Email string \`json:&quot;email&quot;\`
}
// You need to add &quot;Info&quot; after the name of the generated data model so that goctls can recognize it.
// This is the format of the model name &quot;&lt;ModelName&gt;Info&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>&quot;open <code>&lt;file path&gt;.ts</code>: The system cannot find the path specified.&quot; error occurs. This problem occurs because you executed the generation command in a directory other than the &quot;simple-admin-backend-ui&quot; backend web project directory. goctls backend cannot parse the project structure. You must execute the generation command in the &quot;simple-admin-backend-ui&quot; project directory to pass</li></ul>`,15),f={href:"https://github.com/suyuan32/simple-admin-backend-ui/tree/example-code-gen",target:"_blank",rel:"noopener noreferrer"};function g(k,x){const t=i("ExternalLinkIcon");return o(),d("div",null,[c,p,u,e("div",m,[h,e("p",null,[e("a",v,[a("Video Tutorial"),n(t)])])]),b,e("blockquote",null,[e("p",null,[a("Example Project: "),e("a",f,[a("https://github.com/suyuan32/simple-admin-backend-ui/tree/example-code-gen"),n(t)])])])])}const q=s(l,[["render",g],["__file","web_codegen.html.vue"]]);export{q as default};
