import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as t,o as i,c as o,a as n,b as l,d as c,e as a}from"./app-w6_tOJm-.js";const r={},p=a(`<h1 id="i18n-internationalization" tabindex="-1"><a class="header-anchor" href="#i18n-internationalization" aria-hidden="true">#</a> i18n internationalization</h1><blockquote><p>The project supports multi-language internationalization, mainly divided into front-end internationalization and back-end internationalization</p></blockquote><h2 id="front-end-internationalization" tabindex="-1"><a class="header-anchor" href="#front-end-internationalization" aria-hidden="true">#</a> Front-end internationalization</h2><blockquote><p>The front-end internationalization files are located in <code>src/locales/*</code>, and the front-end static text translation is internationalized by the front-end</p></blockquote><p>Called in vue or ts file</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> t <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useI18n</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Usage</span>
<span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token function">t</span><span class="token punctuation">(</span><span class="token string">&quot;sys.dictionary.dictionaryList&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),d={href:"https://doc.vvbin.cn/dep/i18n.html",target:"_blank",rel:"noopener noreferrer"},u=a(`<h2 id="backend-internationalization" tabindex="-1"><a class="header-anchor" href="#backend-internationalization" aria-hidden="true">#</a> Backend internationalization</h2><blockquote><p>The internationalization files are located in the i18n folder. The backend internationalization is used to translate all dynamic data from the backend. The directory structure in core is</p></blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>├── locale
│   ├── en.json
│   └── zh.json
├── translator.go
├── translator_test.go
└── var.go

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Just add translations in en.json and zh.json</p><h3 id="initialization-method" tabindex="-1"><a class="header-anchor" href="#initialization-method" aria-hidden="true">#</a> Initialization method</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>trans <span class="token operator">:=</span> i18n<span class="token punctuation">.</span><span class="token function">NewTranslator</span><span class="token punctuation">(</span>i18n2<span class="token punctuation">.</span>LocaleFS<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>l<span class="token punctuation">.</span>svcCtx<span class="token punctuation">.</span>Trans<span class="token punctuation">.</span><span class="token function">Trans</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>ctx<span class="token punctuation">,</span> i18n<span class="token punctuation">.</span>Success<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="reading-external-files" tabindex="-1"><a class="header-anchor" href="#reading-external-files" aria-hidden="true">#</a> Reading External Files</h3><p>Starting from version v1.0.7, it is possible to read external i18n files.</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>    <span class="token keyword">var</span> trans <span class="token operator">*</span>i18n<span class="token punctuation">.</span>Translator
	<span class="token keyword">if</span> c<span class="token punctuation">.</span>I18nConf<span class="token punctuation">.</span>Dir <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
		trans <span class="token operator">=</span> i18n<span class="token punctuation">.</span><span class="token function">NewTranslatorFromFile</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>I18nConf<span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		trans <span class="token operator">=</span> i18n<span class="token punctuation">.</span><span class="token function">NewTranslator</span><span class="token punctuation">(</span>i18n2<span class="token punctuation">.</span>LocaleFS<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To read an external file, use <code>i18n.NewTranslatorFromFile(c.I18nConf)</code>.</p>`,12);function k(v,h){const s=t("ExternalLinkIcon");return i(),o("div",null,[p,n("p",null,[n("a",d,[l("Detail Tutorial"),c(s)])]),u])}const g=e(r,[["render",k],["__file","i18n.html.vue"]]);export{g as default};
